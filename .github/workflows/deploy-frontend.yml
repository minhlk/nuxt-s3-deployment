name: Upload Nuxt static file into S3

on:
  push:
    branches: [main, develop]

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      app: ${{ steps.filter.outputs.app }}
    environment:
      name: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            app:
              - app/**
              - .github/**
  
  upload-static-file-to-s3:
    needs: [changes]
    if: ${{ needs.changes.outputs.app == 'true' }}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20.9.0]
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout üõé
        uses: actions/checkout@v4

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::992382543201:role/dev-oidc-role
          aws-region: ap-southeast-1

      - name: Setup node env üèó
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Cache node_modules üì¶
        uses: actions/cache@v4.0.2
        id: cache-npm
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
      
      - name: Generate static file
        run: npm run generate

      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Archive necessary folders and files
        run: zip -qq -r dist.zip .env .nuxt .output nuxt.config.js node_modules package.json
        working-directory: ./app

      - name: Upload archive as artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-archive
          path: ./app/dist.zip

      # - name: Upload to Amazon S3
      #   run: aws s3 sync --delete .output/public s3://${{ secrets.AWS_S3_DESTINATION }}
